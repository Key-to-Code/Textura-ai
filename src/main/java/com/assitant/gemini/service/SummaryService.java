package com.assitant.gemini.service;

import com.assitant.gemini.entity.Summary;
import com.assitant.gemini.entity.User;
import com.assitant.gemini.repository.SummaryRepository;
import com.assitant.gemini.request.AssistantRequest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.util.List;

/**
 * Service class for managing Summary entities.
 * This service handles all business logic related to creating, retrieving, and
 * deleting summaries, providing a clean API for the controller layer.
 */

@Service   // Marks this class as a Spring service component.
@Slf4j     // Provides a logger instance for this class.
public class SummaryService {

    @Autowired
    private SummaryRepository summaryRepository;

    /**
     * Creates and saves a new Summary entity to the database.
     * Maps data from the user's request and the processed content to a new Summary object.
     *
     * @param user The User entity associated with the summary.
     * @param request The original request from the user.
     * @param processedContent The content generated by the assistant.
     * @return The saved Summary entity.
     */

    public Summary saveSummary(User user, AssistantRequest request, String processedContent) {
        Summary summary = new Summary();
        summary.setUser(user);
        summary.setOriginalContent(request.getContent());
        summary.setProcessedContent(processedContent);
        summary.setOperation(request.getOperation());
        summary.setTargetLanguage(request.getTargetLanguage());
        summary.setRephraseTone(request.getRephraseTone());
        summary.setSourceUrl(request.getSourceUrl());
        summary.setUserAgent(request.getUserAgent());
        summary.setSessionId(request.getSessionId());

        Summary savedSummary = summaryRepository.save(summary);
        log.info("Summary saved for user: {} with operation: {}", user.getUsername(), request.getOperation());
        return savedSummary;
    }

    /**
     * Retrieves all summaries for a given user, ordered by creation date in descending order.
     *
     * @param user The user whose summaries are to be retrieved.
     * @return A list of Summary entities.
     */

    public List<Summary> getUserSummaries(User user) {
        return summaryRepository.findByUserOrderByCreatedAtDesc(user);
    }

    /**
     * Retrieves summaries for a user filtered by a specific operation type.
     *
     * @param user The user.
     * @param operation The operation to filter by (e.g., "summarize-short").
     * @return A list of matching Summary entities.
     */

    public List<Summary> getUserSummariesByOperation(User user, String operation) {
        return summaryRepository.findByUserAndOperationOrderByCreatedAtDesc(user, operation);
    }

    /**
     * Retrieves summaries created by a user within a specified number of recent days.
     *
     * @param user The user.
     * @param days The number of days to look back.
     * @return A list of recent Summary entities.
     */

    public List<Summary> getRecentSummaries(User user, int days) {
        LocalDateTime since = LocalDateTime.now().minusDays(days);
        return summaryRepository.findByUserAndCreatedAtAfter(user, since);
    }

    /**
     * Searches for summaries belonging to a user that contain a specific keyword in their content.
     *
     * @param user The user.
     * @param keyword The keyword to search for.
     * @return A list of matching Summary entities.
     */

    public List<Summary> searchSummaries(User user, String keyword) {
        return summaryRepository.searchByUserAndKeyword(user, keyword);
    }

    /**
     * Counts the total number of summaries for a given user.
     *
     * @param user The user.
     * @return The total count of summaries.
     */

    public long getUserSummaryCount(User user) {
        return summaryRepository.countByUser(user);
    }

    /**
     * Retrieves a single summary by its ID, ensuring it belongs to the specified user.
     * This method provides a security check to prevent a user from accessing another user's summaries.
     *
     * @param summaryId The ID of the summary.
     * @param user The user who is requesting the summary.
     * @return The Summary entity.
     * @throws RuntimeException if the summary is not found or does not belong to the user.
     */

    public Summary getSummaryById(Long summaryId, User user) {
        return summaryRepository.findById(summaryId)
                .filter(summary -> summary.getUser().getId().equals(user.getId()))
                .orElseThrow(() -> new RuntimeException("Summary not found or access denied"));
    }

    /**
     * Deletes a summary by its ID after verifying that the requesting user is the owner.
     *
     * @param summaryId The ID of the summary to delete.
     * @param user The user who is requesting the deletion.
     */

    public void deleteSummary(Long summaryId, User user) {
        Summary summary = getSummaryById(summaryId, user);
        summaryRepository.delete(summary);
        log.info("Summary deleted: {} for user: {}", summaryId, user.getUsername());
    }
}