package com.assitant.gemini.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import java.time.LocalDateTime;
/**
 * Represents a stored summary or content manipulation record.
 * This entity maps to the 'summaries' table in the database.
 * It's used to persist information about operations like summarization, rephrasing, or translation
 * performed on user-provided content.
 */

@Entity
@Table(name = "summaries")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Summary {

    /**
     * The unique identifier for the summary record.
     * This is the primary key and is auto-generated by the database.
     */

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * A foreign key relationship to the User entity.
     * It links a summary record to the specific user who performed the operation.
     * The fetch type is lazy, meaning the User entity will only be loaded from the database
     * when it's explicitly accessed.
     */

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    /**
     * The original, unprocessed content provided by the user.
     * Stored as a large text block.
     */

    @Column(columnDefinition = "TEXT", nullable = false)
    private String originalContent;

    @Column(columnDefinition = "TEXT", nullable = false)
    private String processedContent;

    @Column(nullable = false)
    private String operation;

    @Column(name = "target_language")
    private String targetLanguage;

    @Column(name = "rephrase_tone")
    private String rephraseTone;

    @Column(name = "source_url")
    private String sourceUrl;

    @Column(name = "user_agent")
    private String userAgent;

    @Column(name = "session_id")
    private String sessionId;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
}
