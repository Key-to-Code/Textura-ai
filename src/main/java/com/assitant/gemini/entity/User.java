package com.assitant.gemini.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Represents a user entity in the application.
 * This class is mapped to the 'users' table in the database and contains
 * user-related information, including authentication and security details.
 */

@Entity
@Table(name = "users")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {

    /**
     * The unique identifier for the user.
     * This is the primary key and is auto-generated by the database.
     */

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The unique username for the user.
     * It's required, and its length is limited to 50 characters.
     */

    @Column(unique = true, nullable = false, length = 50)
    private String username;

    /**
     * The unique email address for the user.
     * It's required, and its length is limited to 100 characters.
     */

    @Column(unique = true, nullable = false, length = 100)
    private String email;

    /**
     * The user's password, which is stored as a BCrypt hash for security.
     * It's required, and its length is limited to 255 characters.
     */

    @Column(nullable = false, length = 255)
    private String password;

    /**
     * Flag indicating if the user account is enabled (true) or disabled (false).
     * Defaults to true.
     */

    @Column(name = "is_enabled", nullable = false)
    private Boolean enabled = true;

    @Column(name = "is_account_non_expired", nullable = false)
    private Boolean accountNonExpired = true;

    @Column(name = "is_account_non_locked", nullable = false)
    private Boolean accountNonLocked = true;

    @Column(name = "is_credentials_non_expired", nullable = false)
    private Boolean credentialsNonExpired = true;

    @Column(name = "last_login")
    private LocalDateTime lastLogin;

    @Column(name = "failed_login_attempts")
    private Integer failedLoginAttempts = 0;

    @Column(name = "account_locked_until")
    private LocalDateTime accountLockedUntil;

    @Column(name = "created_at", nullable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    /**
     * One-to-many relationship with the Summary entity.
     * This establishes that a user can have multiple summaries.
     * The 'mappedBy' attribute indicates that the 'user' field in the Summary entity
     * is the owner of this relationship.
     * 'CascadeType.ALL' means that all operations (e.g., persist, remove)
     * on a User entity will be cascaded to its associated Summary entities.
     * The fetch type is lazy, meaning the list of summaries will not be loaded
     * from the database until it's explicitly accessed.
     */

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Summary> summaries;


    /**
     * A lifecycle callback method executed just before the entity is persisted.
     * It sets the initial creation and update timestamps and ensures default
     * boolean flags and integer counters are set to their default values if they are null.
     */

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
        if (enabled == null) enabled = true;
        if (accountNonExpired == null) accountNonExpired = true;
        if (accountNonLocked == null) accountNonLocked = true;
        if (credentialsNonExpired == null) credentialsNonExpired = true;
        if (failedLoginAttempts == null) failedLoginAttempts = 0;
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }

    // Security helper methods
    public boolean isAccountLocked() {
        return accountLockedUntil != null && accountLockedUntil.isAfter(LocalDateTime.now());
    }

    public void lockAccount(int minutes) {
        this.accountLockedUntil = LocalDateTime.now().plusMinutes(minutes);
        this.accountNonLocked = false;
    }

    public void unlockAccount() {
        this.accountLockedUntil = null;
        this.accountNonLocked = true;
        this.failedLoginAttempts = 0;
    }

    public void incrementFailedLoginAttempts() {
        this.failedLoginAttempts = (this.failedLoginAttempts == null ? 0 : this.failedLoginAttempts) + 1;
    }

    public void resetFailedLoginAttempts() {
        this.failedLoginAttempts = 0;
        this.lastLogin = LocalDateTime.now();
    }
}